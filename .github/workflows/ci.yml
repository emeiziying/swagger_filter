name: CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version type to release'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        dart-version: ['3.0.0', 'stable']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Dart
      uses: dart-lang/setup-dart@v1
      with:
        dart-version: ${{ matrix.dart-version }}
    
    - name: Install dependencies
      run: dart pub get
    
    - name: Verify formatting
      run: dart format --output=none --set-exit-if-changed .
    
    - name: Analyze project source
      run: dart analyze --fatal-infos
    
    - name: Run tests
      run: dart test
    
    - name: Test build_runner
      run: dart run build_runner build --delete-conflicting-outputs
    
    - name: Test command line
      run: dart run swagger_filter --version

  release:
    name: Create Release
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    needs: test
    
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Setup Dart
      uses: dart-lang/setup-dart@v1
      with:
        dart-version: 'stable'
        
    - name: Configure git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
    
    - name: Get current version and calculate new version
      id: version
      run: |
        CURRENT_VERSION=$(grep "version:" pubspec.yaml | sed 's/version: //')
        echo "current=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        
        IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
        MAJOR=${VERSION_PARTS[0]}
        MINOR=${VERSION_PARTS[1]}
        PATCH=${VERSION_PARTS[2]}
        
        case "${{ github.event.inputs.version_type }}" in
          "patch")
            PATCH=$((PATCH + 1))
            ;;
          "minor")
            MINOR=$((MINOR + 1))
            PATCH=0
            ;;
          "major")
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
            ;;
        esac
        
        NEW_VERSION="$MAJOR.$MINOR.$PATCH"
        echo "new=$NEW_VERSION" >> $GITHUB_OUTPUT
    
    - name: Update version files
      run: |
        # Update pubspec.yaml
        sed -i "s/version: ${{ steps.version.outputs.current }}/version: ${{ steps.version.outputs.new }}/" pubspec.yaml
        
        # Update lib/version.dart
        sed -i "s/const String packageVersion = '${{ steps.version.outputs.current }}'/const String packageVersion = '${{ steps.version.outputs.new }}'/" lib/version.dart
        
        # Update CHANGELOG.md
        TODAY=$(date +%Y-%m-%d)
        sed -i "s/## \[Unreleased\]/## [Unreleased]\n\n## [${{ steps.version.outputs.new }}] - $TODAY/" CHANGELOG.md
    
    - name: Commit and tag
      run: |
        git add .
        git commit -m "chore: bump version to ${{ steps.version.outputs.new }}"
        git tag "v${{ steps.version.outputs.new }}"
        git push origin main
        git push origin "v${{ steps.version.outputs.new }}"
    
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.version.outputs.new }}
        release_name: Release v${{ steps.version.outputs.new }}
        body: |
          Changes in this Release
          - See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for details
        draft: false
        prerelease: false

  publish:
    name: Publish to pub.dev
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Dart
      uses: dart-lang/setup-dart@v1
      with:
        dart-version: 'stable'
    
    - name: Install dependencies
      run: dart pub get
    
    - name: Publish package
      run: dart pub publish --force
      env:
        PUB_TOKEN: ${{ secrets.PUB_TOKEN }}

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Extract version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
    
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release v${{ steps.get_version.outputs.VERSION }}
        body: |
          Changes in this Release
          - See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for details
        draft: false
        prerelease: false 